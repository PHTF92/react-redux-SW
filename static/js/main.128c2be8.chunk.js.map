{"version":3,"sources":["services/SWAPI.js","components/Table.js","actions/index.js","components/Inputs.js","actions/searchFilter.js","components/Selectors.js","actions/selectorFilter.js","actions/newFilter.js","actions/removeFilter.js","App.js","serviceWorker.js","reducers/planets.js","reducers/searchFilterReducer.js","reducers/index.js","store/index.js","index.js"],"names":["getPlanets","fetch","then","response","json","ok","Promise","resolve","reject","Table","this","props","p","name","filters","filter","planeta","toLowerCase","includes","boraFiltrar","console","log","final","forEach","numericValues","column","comparison","valueComparison","pla","parseFloat","splice","a","forDoFiltrar","length","data","headerTable","Object","keys","planets","planetsFilteredByName","planetsFilteredBySelect","map","header","key","chave","className","tableRender","Component","connect","searchFilterReducer","dispatch","type","isFetching","results","error","receivePlanetsFailure","message","Inputs","value","searchFilterDispatch","placeholder","onChange","e","target","Selectors","filtros","slice","arrFiltros","filtro","push","addNewFilter","alert","removerFilter","id","arrFilter","index","onClick","removeFilter","selectors","colunas","selectFilterDispatch","verificaEstadoFiltragem","coluna","valor","addFiltro","geraFiltro","i","part","col","comp","v","App","Boolean","window","location","hostname","match","INITIAL_PLANETS_STATE","state","action","initialState","searchFilterByName","elem","selectorFilter","newFilter","parseInt","rootReducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducer","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.128c2be8.chunk.js","sourcesContent":["const PLANETS_API = 'https://swapi-trybe.herokuapp.com/api';\n\nconst getPlanets = () => (\n  fetch(`${PLANETS_API}/planets`)\n    .then((response) => (\n      response\n        .json()\n        .then((json) => (response.ok ? Promise.resolve(json) : Promise.reject(json)))\n    ))\n);\n\nexport default getPlanets;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchPlanets } from '../actions';\nimport './Table.css';\n\nclass Table extends Component {\n  componentDidMount() {\n    const { getPlanets } = this.props;\n    getPlanets();\n  }\n\n  planetsFilteredByName(p) {\n    const { name } = this.props.filters[0];\n    if (!name) return p;\n    return p.filter((planeta) => planeta.name.toLowerCase().includes(name.toLowerCase()));\n  }\n\n  forDoFiltrar(boraFiltrar, p) {\n    console.log(this.props);\n    let final = p;\n    boraFiltrar.forEach(({ numericValues: { column, comparison, valueComparison } }) => {\n      if (column !== 'coluna' && comparison === 'Maior que' && valueComparison >= 0) {\n        final = final.filter((pla) => (parseFloat(pla[column]) > parseFloat(valueComparison)));\n      } else if (column !== 'coluna' && comparison === 'Menor que' && valueComparison >= 0) {\n        final = final.filter((pla) => (parseFloat(pla[column]) < parseFloat(valueComparison)));\n      } else if (column !== 'coluna' && comparison === 'ou Igual a' && valueComparison >= 0) {\n        final = final.filter((pla) => (parseFloat(pla[column]) === parseFloat(valueComparison)));\n      }\n    });\n    return final;\n  }\n\n  planetsFilteredBySelect(p) {\n    const { filters } = this.props;\n    const boraFiltrar = [...filters];\n    boraFiltrar.splice(0, 2);\n    const a = this.forDoFiltrar(boraFiltrar, p);\n    if (!boraFiltrar.length) return p;\n    return a;\n  }\n\n  tableRender() {\n    const { data } = this.props;\n    console.log(data);\n    const headerTable = data ? Object.keys(data[0]) : '';\n    let planets = data ? [...data] : [];\n    planets = this.planetsFilteredByName(planets);\n    planets = this.planetsFilteredBySelect(planets);\n    if (headerTable) {\n      return (\n        <table>\n          <thead>\n            <tr>\n              {headerTable.map((header) => (\n                header !== 'residents' ? <th key={header}>{header}</th> : null\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {planets.map((planeta) => (\n              <tr>\n                {Object.keys(planeta).map((chave) => (\n                  chave !== 'residents' ? <td key={planeta[chave]}>{planeta[chave]}</td> : null\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      );\n    }\n    return '';\n  }\n\n  render() {\n    return (\n      <div className=\"map\">\n        {this.tableRender()}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ planets: { data }, searchFilterReducer: { filters } }) => ({\n  data,\n  filters,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getPlanets: () => dispatch(fetchPlanets()),\n});\n\nTable.propTypes = {\n  getPlanets: PropTypes.func.isRequired,\n  filters: PropTypes.instanceOf(Array).isRequired,\n  data: PropTypes.instanceOf(Array).isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n","import getPlanets from '../services/SWAPI';\n\nexport const REQUEST_PLANETS = 'REQUEST_ISS_LOCATION';\nexport const RECEIVE_PLANETS_SUCCESS = 'RECEIVE_PLANETS_SUCCESS';\nexport const RECEIVE_PLANETS_FAILURE = 'RECEIVE_PLANETS_FAILURE';\n\nconst requestPlanets = () => ({\n  type: REQUEST_PLANETS,\n  isFetching: true,\n});\n\nconst receivePlanets = ({ results }) => ({\n  type: RECEIVE_PLANETS_SUCCESS,\n  planets: results,\n});\n\nconst receivePlanetsFailure = (error) => ({\n  type: RECEIVE_PLANETS_FAILURE,\n  error,\n});\n\nexport function fetchPlanets() {\n  return (dispatch) => {\n    dispatch(requestPlanets());\n    return getPlanets()\n      .then(\n        (planets) => dispatch(receivePlanets(planets)),\n        (error) => dispatch(receivePlanetsFailure(error.message)),\n      );\n  };\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { searchFilter } from '../actions/searchFilter';\n\nclass Inputs extends Component {\n  render() {\n    const { value, searchFilterDispatch } = this.props;\n    return (\n      <div>\n        <div>\n          Digite a palavra:\n          <input\n            placeholder=\"Procurar planeta\"\n            onChange={(e) => searchFilterDispatch(e.target.value)}\n            value={value}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ value }) => ({ value });\n\nconst mapDispatchToProps = (dispatch) => ({\n  searchFilterDispatch: (e) => dispatch(searchFilter(e)),\n});\n\nInputs.propTypes = {\n  searchFilterDispatch: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Inputs);\n","export const SEARCH_FILTER = 'SEARCH_FILTER';\n\nexport function searchFilter(value) {\n  return { type: SEARCH_FILTER, value };\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { selectorFilter } from '../actions/selectorFilter';\nimport { newSelectorFilter } from '../actions/newFilter';\nimport { removeFilter } from '../actions/removeFilter';\nimport './Selectors.css';\n\nclass Selectors extends Component {\n  verificaEstadoFiltragem() {\n    const { filters } = this.props;\n    const filtros = filters.slice(1);\n    const arrFiltros = [];\n    filtros.forEach((filtro) => {\n      if (filtro.numericValues.column !== 'coluna') arrFiltros.push(filtro);\n    });\n    return arrFiltros;\n  }\n\n  addFiltro() {\n    const { addNewFilter, filters } = this.props;\n    const { column, comparison, valueComparison } = filters[1].numericValues;\n    if ((column !== 'coluna' && comparison !== '-' && valueComparison >= 0)) {\n      addNewFilter(column, comparison, valueComparison);\n    } else alert('escolha os três campos');\n  }\n\n  removeFilter(e) {\n    const { removerFilter } = this.props;\n    const { id, value } = e.target;\n    removerFilter(id, value);\n  }\n\n  geraFiltro() {\n    const { filters } = this.props;\n    if (filters.length > 2) {\n      const arrFilter = [...filters];\n      arrFilter.splice(0, 2);\n      return (\n        <div className=\"filtros\">\n          {arrFilter.map((filtro, index) => (\n            <div className=\"mini-filtros\">\n              <p>\n                Filtro:{filtro.numericValues.column}\n              </p>\n              <p>\n                Comparador: {filtro.numericValues.comparison}\n              </p>\n              <p>\n                Valor: {filtro.numericValues.valueComparison}\n              </p>\n              <button\n                onClick={(e) => this.removeFilter(e)}\n                id={index + 2}\n                value={filtro.numericValues.column}\n              >X</button>\n            </div>\n          ))}\n        </div>\n      );\n    }\n    return '';\n  }\n\n  render() {\n    const { selectors, filters } = this.props;\n    const colunas = selectors || [];\n    const valores = ['-', 'Maior que', 'Menor que', 'ou Igual a'];\n    const { selectFilterDispatch } = this.props;\n    const { numericValues: { column, comparison, valueComparison } } = filters[1];\n    this.verificaEstadoFiltragem();\n    return (\n      <div>\n        <div>\n          Escolha o filtro:\n          <select value={column} onChange={(e) => selectFilterDispatch(e.target.value, 'column')}>\n            {colunas.map((coluna) => (<option value={coluna}>{coluna}</option>))}\n          </select>\n          <select value={comparison} onChange={(e) => selectFilterDispatch(e.target.value, 'comparison')}>\n            {valores.map((valor) => (<option value={valor}>{valor}</option>))}\n          </select>\n          <input\n            type=\"number\"\n            onChange={(e) => selectFilterDispatch(e.target.value, 'valueComparison')}\n            value={valueComparison}\n          />\n          <button onClick={() => this.addFiltro()}>Filtrar</button>\n        </div>\n        {this.geraFiltro()}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ planets, searchFilterReducer: { filters, selectors } }) => ({\n  planets,\n  filters,\n  selectors,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  selectFilterDispatch: (e, i) => dispatch(selectorFilter(e, i)),\n  addNewFilter: (col, comp, v) => dispatch(newSelectorFilter(col, comp, v)),\n  removerFilter: (i, value) => dispatch(removeFilter(i, value)),\n});\n\nSelectors.propTypes = {\n  selectFilterDispatch: PropTypes.func.isRequired,\n  addNewFilter: PropTypes.func.isRequired,\n  removerFilter: PropTypes.func.isRequired,\n  filters: PropTypes.instanceOf(Array).isRequired,\n  selectors: PropTypes.instanceOf(Array).isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Selectors);\n","export const SELECTOR_FILTER = 'SELECTOR_FILTER';\n\nexport function selectorFilter(value, part) {\n  return { type: SELECTOR_FILTER, value, part };\n}\n","export const NEW_FILTER = 'NEW_FILTER';\n\nexport function newSelectorFilter(column, comparison, valueComparison) {\n  return { type: NEW_FILTER, column, comparison, valueComparison };\n}\n","export const REMOVE_FILTER = 'REMOVE_FILTER';\n\nexport function removeFilter(i, value) {\n  return { type: REMOVE_FILTER, i, value };\n}\n","import React from 'react';\nimport './App.css';\nimport Table from './components/Table';\nimport Inputs from './components/Inputs';\nimport Selectors from './components/Selectors';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div>Star Wars</div>\n      <Inputs />\n      <Selectors />\n      <Table />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { REQUEST_PLANETS, RECEIVE_PLANETS_SUCCESS } from '../actions';\n\nconst INITIAL_PLANETS_STATE = {\n};\n\nconst getPlanets = (state = INITIAL_PLANETS_STATE, action) => {\n  // console.log('received action: ', action);\n  switch (action.type) {\n    case REQUEST_PLANETS:\n      return {\n        ...state,\n      };\n    case RECEIVE_PLANETS_SUCCESS:\n      return {\n        ...state,\n        data: action.planets,\n      };\n    default: return state;\n  }\n};\n\nexport default getPlanets;\n","import { SEARCH_FILTER } from '../actions/searchFilter';\nimport { SELECTOR_FILTER } from '../actions/selectorFilter';\nimport { NEW_FILTER } from '../actions/newFilter';\nimport { REMOVE_FILTER } from '../actions/removeFilter';\n\nconst initialState = {\n  filters: [\n    {\n      name: '',\n    },\n    {\n      numericValues: {\n        column: 'coluna',\n        comparison: '-',\n        valueComparison: 0,\n      },\n    },\n  ],\n  selectors: ['coluna', 'population', 'orbital_period', 'diameter', 'rotation_period', 'surface_water'],\n};\n\nfunction searchFilterByName(action, state) {\n  const { value } = action;\n  return {\n    ...state,\n    filters: state.filters.map((elem, index) => {\n      if (index === 0) {\n        return { ...elem, name: value };\n      }\n      return elem;\n    }),\n  };\n}\n\nfunction selectorFilter(action, state) {\n  const { value, part } = action;\n  return {\n    ...state,\n    filters: state.filters.map((elem, index) => {\n      if (index === 1) {\n        return {\n          ...elem,\n          numericValues: { ...state.filters[1].numericValues, [part]: value },\n        };\n      }\n      return elem;\n    }),\n  };\n}\n\nfunction newFilter(action, state) {\n  const { column, comparison, valueComparison } = action;\n  return {\n    ...state,\n    selectors: state.selectors.filter((elem) => elem !== column),\n    filters: [...state.filters.map((elem, index) => {\n      if (index === 1) {\n        return {\n          ...elem,\n          numericValues: {\n            column: 'coluna',\n            comparison: '-',\n            valueComparison: 0,\n          },\n        };\n      }\n      return elem;\n    }), {\n      numericValues: {\n        column,\n        comparison,\n        valueComparison,\n      },\n    }],\n  };\n}\n\nfunction removeFilter(action, state) {\n  const { i, value } = action;\n  console.log(i, value);\n  console.log(state.filters);\n  return {\n    ...state,\n    selectors: [...state.selectors, value],\n    filters: state.filters.filter((elem, index) => index !== parseInt(i, 10)),\n  };\n}\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case SEARCH_FILTER: {\n      return searchFilterByName(action, state);\n    }\n    case SELECTOR_FILTER: {\n      return selectorFilter(action, state);\n    }\n    case NEW_FILTER: {\n      return newFilter(action, state);\n    }\n    case REMOVE_FILTER: {\n      return removeFilter(action, state);\n    }\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport planets from './planets';\nimport searchFilterReducer from './searchFilterReducer';\n\nconst rootReducer = combineReducers({\n  planets,\n  searchFilterReducer,\n});\n\nexport default rootReducer;\n","import { applyMiddleware, createStore, compose } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport reducer from '../reducers';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(thunk)));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}